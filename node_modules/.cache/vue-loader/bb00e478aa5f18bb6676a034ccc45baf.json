{"remainingRequest":"C:\\Repos\\QuizApp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Repos\\QuizApp\\src\\components\\Questions.vue?vue&type=style&index=0&id=d0466a66&scoped=true&lang=css&","dependencies":[{"path":"C:\\Repos\\QuizApp\\src\\components\\Questions.vue","mtime":1629804015818},{"path":"C:\\Repos\\QuizApp\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Repos\\QuizApp\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Repos\\QuizApp\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Repos\\QuizApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Repos\\QuizApp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiAgI3F1aXotY29udGFpbmVyIHsKICAgICAgbWFyZ2luOiAxcmVtIGF1dG87CiAgICAgIHBhZGRpbmc6IDFyZW07CiAgICAgIG1heC13aWR0aDogNzUwcHg7CiAgfQoKaDEgewogICAgICBmb250LXNpemU6IDEuM3JlbTsKICAgICAgcGFkZGluZzogMC43cmVtOwogIH0gCgouZGl2aWRlciB7CiAgICAgIG1hcmdpbjogMC41cmVtIDA7CiAgICAgIGJvcmRlcjogM3B4IHNvbGlkIHJnYmEoNzIsIDczLCA3MywgMC43KTsKICAgICAgYm9yZGVyLXJhZGl1czogMnB4OwogICAgICBib3gtc2hhZG93OiAzcHggNXB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMyk7CiAgfQoKICBidXR0b24ucmlnaHRBbnN3ZXIgewogICAgICBjb2xvcjogYmxhY2s7CiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgKICAgICAgICAgIDIxMGRlZywKICAgICAgICAgIHJnYmEoMCwgMTc4LCA3MiwgMC4yNSksCiAgICAgICAgICByZ2JhKDAsIDE3OCwgNzIsIDAuNSkKICAgICAgKTsKICB9CgogIGJ1dHRvbi53cm9uZ0Fuc3dlciB7CiAgY29sb3I6IGJsYWNrOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgKICAgICAgMjEwZGVnLAogICAgICByZ2JhKDI0NSwgMCwgODcsIDAuMjUpLAogICAgICByZ2JhKDI0NSwgMCwgODcsIDAuNSkKICApOwogIH0KCiAgYnV0dG9uLnNob3dSaWdodEFuc3dlciB7CiAgY29sb3I6IGJsYWNrOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgKICAgICAgMjEwZGVnLAogICAgICByZ2JhKDU0LCAxMzEsIDIsIDAuMjUpLAogICAgICByZ2JhKDUsIDI0MywgNSwgMC41KQogICk7CiAgfQo="},{"version":3,"sources":["Questions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Questions.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div id=\"quiz-container\">\r\n    <div class=\"correctAnswers\">\r\n      You have <strong>{{ correctAnswers }} of {{ questions.length }} correct!</strong>\r\n    </div>\r\n    <div class=\"correctAnswers\">\r\n      You are at question {{ index + 1 }} of {{ questions.length }} total, hang on!\r\n    </div>\r\n\r\n    <hr class=\"divider\" />\r\n\r\n    <div>\r\n      <h1 v-html=\"loading ? 'Loading...' : currentQuestion.question\"></h1>\r\n      <form v-if=\"currentQuestion\">\r\n        <button\r\n          v-for=\"answer in currentQuestion.answers\"\r\n          :index=\"currentQuestion.key\"\r\n          :key=\"answer\"\r\n          v-html=\"answer\"\r\n          @click.prevent=\"selectAnswerClick\"\r\n        ></button>\r\n      </form>\r\n\r\n      <hr class=\"divider\" />\r\n\r\n      <form v-if=\"index + 1 == questions.length\">\r\n        <button type=\"submit\" @click.prevent = \"startNewClick\"> START AGAIN? </button>\r\n      </form>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport {getConfig} from \"@/utils/config\";\r\n\r\nexport default {\r\n    name: \"Questions\",\r\n\r\n    //get Config\r\n    async created() {\r\n        const config = getConfig();\r\n\r\n        console.log(config);\r\n\r\n        //if nothing go back\r\n        if (config == null) {\r\n            this.$router.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        //else get the questions\r\n        try {\r\n                this.loading = true;\r\n\r\n                //for indentify single answers\r\n                let index = 0;\r\n\r\n                //build URL\r\n                let fetchURL = \"https://opentdb.com/api.php?amount=\"+ config.amount +\"&category=\"+ config.category.id +\"&difficulty=\"+ config.difficulty.id +\"&type=multiple\";\r\n                //let fetchURL = \"https://opentdb.com/api.php?amount=\"+ 10 +\"&category=\"+ 11 +\"&difficulty=\"+ \"easy\" +\"&type=multiple\"\r\n\r\n                console.log(fetchURL);\r\n\r\n                // fetch questionns from api\r\n                let response = await fetch(fetchURL);\r\n                let jsonResponse = await response.json();\r\n                let data = jsonResponse.results.map((questions) => {\r\n\r\n                // get the answers to an array\r\n                questions.answers = [\r\n                    questions.correct_answer,\r\n                    ...questions.incorrect_answers,\r\n                ];\r\n\r\n                // set some defaults for further use\r\n                questions.rightAnswer = null;\r\n                questions.key = index;\r\n                index ++;\r\n\r\n                return questions;\r\n                } );\r\n\r\n                this.questions = data;\r\n                this.loading = false;\r\n                     \r\n        } \r\n        catch(error){\r\n            this.error = error.message;\r\n        }\r\n            \r\n    },\r\n\r\n    // store the data\r\n    data() {\r\n    return {\r\n        error: \"\",\r\n        correctAnswers: 0,\r\n        questions: [],\r\n        loading: true,\r\n        index: 0\r\n        };\r\n    },\r\n    //computed Section\r\n    computed: {\r\n        //which one to ask?\r\n        currentQuestion() {\r\n            if(this.questions != [])\r\n                return this.questions[this.index];\r\n            \r\n            return null;\r\n        },\r\n        questionsFinished(){\r\n            if (this.questions.length == 0)\r\n                return false;\r\n            \r\n            //is everything answered?\r\n            let finishedQuestions = 0;\r\n            this.questions.forEach( function(questions) {\r\n                questions.correct_answer != null ? finishedQuestions++ : null;\r\n            }\r\n            );\r\n            return finishedQuestions == this.questions.length;\r\n        }\r\n    \r\n  },\r\n\r\n    //methods Section\r\n    methods: {\r\n        //restart the Quiz\r\n        startNewClick: function(){\r\n            this.$router.push(\"/\");\r\n        },\r\n\r\n        //what happens if you choose the answer\r\n        selectAnswerClick: function(event){\r\n\r\n            //which one was answered?\r\n            let index = event.target.getAttribute(\"index\");\r\n            let selectedGivenAnswer = event.target.innerHTML;\r\n            //make sure there is nothing wrong in the string\r\n            let givenAnswer = selectedGivenAnswer.replace(/'/, \"&#039;\");\r\n\r\n            //then set it in the array\r\n            this.questions[index].givenAnswer = givenAnswer;\r\n\r\n            //set the clicked button\r\n            event.target.classList.add(\"clicked\");\r\n            let allButtons = document.querySelectorAll(`[index=\"${index}\"]`)\r\n\r\n            //disable non used buttons\r\n            for (let i = 0; i < allButtons.length; i++){\r\n                if (allButtons[i] == event.target) \r\n                    continue;\r\n                \r\n                allButtons[i].setAttribute(\"disabled\", \"\");\r\n            }\r\n\r\n            //Invoke it\r\n            this.checkAnswer(event, index);\r\n\r\n        },\r\n\r\n        //did you answered whise?\r\n        checkAnswer: function(event, index){\r\n\r\n            let actualQuestion = this.questions[index];\r\n\r\n            //answer given?\r\n            if (actualQuestion.givenAnswer === actualQuestion.correct_answer)\r\n                {\r\n                    //give user a nice feedback\r\n                    event.target.classList.add(\"rightAnswer\");\r\n\r\n                    //and mark as right\r\n                    this.questions[index].rightAnswer = true;\r\n\r\n                    //score some point\r\n                    this.correctAnswers++;\r\n\r\n                }\r\n\r\n                else {\r\n                    //give user a not so nice feedback\r\n                    event.target.classList.add(\"wrongAnswer\");\r\n\r\n                    //mark as false\r\n                    this.questions[index].rightAnswer = false;\r\n\r\n                    //and show the right on\r\n                    let correctAnswer = this.questions[index].correct_answer;\r\n                    let allButtons = document.querySelectorAll(`[index=\"${index}\"]`);\r\n\r\n                    allButtons.forEach(function(button) \r\n                    {\r\n                        if (button.innerHTML === correctAnswer) \r\n                        {\r\n                            button.classList.add(\"showRightAnswer\");\r\n                        }\r\n                            \r\n                    });\r\n            }\r\n                \r\n            //set index one up\r\n            if (this.index < this.questions.length - 1) {\r\n                setTimeout(\r\n                    function() {\r\n                        this.index += 1;\r\n                    }.bind(this),\r\n                3000 );\r\n            }\r\n            \r\n        },\r\n\r\n\r\n        //load data as soon as the component is loaded\r\n        mounted() {\r\n            this.fetchQuestions();\r\n        }\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n    #quiz-container {\r\n        margin: 1rem auto;\r\n        padding: 1rem;\r\n        max-width: 750px;\r\n    }\r\n\r\n  h1 {\r\n        font-size: 1.3rem;\r\n        padding: 0.7rem;\r\n    } \r\n\r\n  .divider {\r\n        margin: 0.5rem 0;\r\n        border: 3px solid rgba(72, 73, 73, 0.7);\r\n        border-radius: 2px;\r\n        box-shadow: 3px 5px 5px rgba(0, 0, 0, 0.3);\r\n    }\r\n\r\n    button.rightAnswer {\r\n        color: black;\r\n        background: linear-gradient(\r\n            210deg,\r\n            rgba(0, 178, 72, 0.25),\r\n            rgba(0, 178, 72, 0.5)\r\n        );\r\n    }\r\n\r\n    button.wrongAnswer {\r\n    color: black;\r\n    background: linear-gradient(\r\n        210deg,\r\n        rgba(245, 0, 87, 0.25),\r\n        rgba(245, 0, 87, 0.5)\r\n    );\r\n    }\r\n\r\n    button.showRightAnswer {\r\n    color: black;\r\n    background: linear-gradient(\r\n        210deg,\r\n        rgba(54, 131, 2, 0.25),\r\n        rgba(5, 243, 5, 0.5)\r\n    );\r\n    }\r\n</style>"]}]}