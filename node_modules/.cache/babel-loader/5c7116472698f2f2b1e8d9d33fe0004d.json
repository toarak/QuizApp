{"remainingRequest":"C:\\Repos\\QuizApp\\node_modules\\babel-loader\\lib\\index.js!C:\\Repos\\QuizApp\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Repos\\QuizApp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Repos\\QuizApp\\src\\components\\Questions.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Repos\\QuizApp\\src\\components\\Questions.vue","mtime":1629804015818},{"path":"C:\\Repos\\QuizApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Repos\\QuizApp\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Repos\\QuizApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Repos\\QuizApp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJDOi9SZXBvcy9RdWl6QXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJDOi9SZXBvcy9RdWl6QXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBnZXRDb25maWcgfSBmcm9tICJAL3V0aWxzL2NvbmZpZyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiUXVlc3Rpb25zIiwKICAvL2dldCBDb25maWcKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgY29uZmlnLCBpbmRleCwgZmV0Y2hVUkwsIHJlc3BvbnNlLCBqc29uUmVzcG9uc2UsIGRhdGE7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb25maWcgPSBnZXRDb25maWcoKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjb25maWcpOyAvL2lmIG5vdGhpbmcgZ28gYmFjawoKICAgICAgICAgICAgICBpZiAoIShjb25maWcgPT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpcy4kcm91dGVyLnB1c2goIi8iKTsKCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDU7CiAgICAgICAgICAgICAgX3RoaXMubG9hZGluZyA9IHRydWU7IC8vZm9yIGluZGVudGlmeSBzaW5nbGUgYW5zd2VycwoKICAgICAgICAgICAgICBpbmRleCA9IDA7IC8vYnVpbGQgVVJMCgogICAgICAgICAgICAgIGZldGNoVVJMID0gImh0dHBzOi8vb3BlbnRkYi5jb20vYXBpLnBocD9hbW91bnQ9IiArIGNvbmZpZy5hbW91bnQgKyAiJmNhdGVnb3J5PSIgKyBjb25maWcuY2F0ZWdvcnkuaWQgKyAiJmRpZmZpY3VsdHk9IiArIGNvbmZpZy5kaWZmaWN1bHR5LmlkICsgIiZ0eXBlPW11bHRpcGxlIjsgLy9sZXQgZmV0Y2hVUkwgPSAiaHR0cHM6Ly9vcGVudGRiLmNvbS9hcGkucGhwP2Ftb3VudD0iKyAxMCArIiZjYXRlZ29yeT0iKyAxMSArIiZkaWZmaWN1bHR5PSIrICJlYXN5IiArIiZ0eXBlPW11bHRpcGxlIgoKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmZXRjaFVSTCk7IC8vIGZldGNoIHF1ZXN0aW9ubnMgZnJvbSBhcGkKCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgIHJldHVybiBmZXRjaChmZXRjaFVSTCk7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAganNvblJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBkYXRhID0ganNvblJlc3BvbnNlLnJlc3VsdHMubWFwKGZ1bmN0aW9uIChxdWVzdGlvbnMpIHsKICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgYW5zd2VycyB0byBhbiBhcnJheQogICAgICAgICAgICAgICAgcXVlc3Rpb25zLmFuc3dlcnMgPSBbcXVlc3Rpb25zLmNvcnJlY3RfYW5zd2VyXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHF1ZXN0aW9ucy5pbmNvcnJlY3RfYW5zd2VycykpOyAvLyBzZXQgc29tZSBkZWZhdWx0cyBmb3IgZnVydGhlciB1c2UKCiAgICAgICAgICAgICAgICBxdWVzdGlvbnMucmlnaHRBbnN3ZXIgPSBudWxsOwogICAgICAgICAgICAgICAgcXVlc3Rpb25zLmtleSA9IGluZGV4OwogICAgICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbnM7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgX3RoaXMucXVlc3Rpb25zID0gZGF0YTsKICAgICAgICAgICAgICBfdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI0OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjE7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSg1KTsKICAgICAgICAgICAgICBfdGhpcy5lcnJvciA9IF9jb250ZXh0LnQwLm1lc3NhZ2U7CgogICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzUsIDIxXV0pOwogICAgfSkpKCk7CiAgfSwKICAvLyBzdG9yZSB0aGUgZGF0YQogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBlcnJvcjogIiIsCiAgICAgIGNvcnJlY3RBbnN3ZXJzOiAwLAogICAgICBxdWVzdGlvbnM6IFtdLAogICAgICBsb2FkaW5nOiB0cnVlLAogICAgICBpbmRleDogMAogICAgfTsKICB9LAogIC8vY29tcHV0ZWQgU2VjdGlvbgogIGNvbXB1dGVkOiB7CiAgICAvL3doaWNoIG9uZSB0byBhc2s/CiAgICBjdXJyZW50UXVlc3Rpb246IGZ1bmN0aW9uIGN1cnJlbnRRdWVzdGlvbigpIHsKICAgICAgaWYgKHRoaXMucXVlc3Rpb25zICE9IFtdKSByZXR1cm4gdGhpcy5xdWVzdGlvbnNbdGhpcy5pbmRleF07CiAgICAgIHJldHVybiBudWxsOwogICAgfSwKICAgIHF1ZXN0aW9uc0ZpbmlzaGVkOiBmdW5jdGlvbiBxdWVzdGlvbnNGaW5pc2hlZCgpIHsKICAgICAgaWYgKHRoaXMucXVlc3Rpb25zLmxlbmd0aCA9PSAwKSByZXR1cm4gZmFsc2U7IC8vaXMgZXZlcnl0aGluZyBhbnN3ZXJlZD8KCiAgICAgIHZhciBmaW5pc2hlZFF1ZXN0aW9ucyA9IDA7CiAgICAgIHRoaXMucXVlc3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHF1ZXN0aW9ucykgewogICAgICAgIHF1ZXN0aW9ucy5jb3JyZWN0X2Fuc3dlciAhPSBudWxsID8gZmluaXNoZWRRdWVzdGlvbnMrKyA6IG51bGw7CiAgICAgIH0pOwogICAgICByZXR1cm4gZmluaXNoZWRRdWVzdGlvbnMgPT0gdGhpcy5xdWVzdGlvbnMubGVuZ3RoOwogICAgfQogIH0sCiAgLy9tZXRob2RzIFNlY3Rpb24KICBtZXRob2RzOiB7CiAgICAvL3Jlc3RhcnQgdGhlIFF1aXoKICAgIHN0YXJ0TmV3Q2xpY2s6IGZ1bmN0aW9uIHN0YXJ0TmV3Q2xpY2soKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCIvIik7CiAgICB9LAogICAgLy93aGF0IGhhcHBlbnMgaWYgeW91IGNob29zZSB0aGUgYW5zd2VyCiAgICBzZWxlY3RBbnN3ZXJDbGljazogZnVuY3Rpb24gc2VsZWN0QW5zd2VyQ2xpY2soZXZlbnQpIHsKICAgICAgLy93aGljaCBvbmUgd2FzIGFuc3dlcmVkPwogICAgICB2YXIgaW5kZXggPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCJpbmRleCIpOwogICAgICB2YXIgc2VsZWN0ZWRHaXZlbkFuc3dlciA9IGV2ZW50LnRhcmdldC5pbm5lckhUTUw7IC8vbWFrZSBzdXJlIHRoZXJlIGlzIG5vdGhpbmcgd3JvbmcgaW4gdGhlIHN0cmluZwoKICAgICAgdmFyIGdpdmVuQW5zd2VyID0gc2VsZWN0ZWRHaXZlbkFuc3dlci5yZXBsYWNlKC8nLywgIiYjMDM5OyIpOyAvL3RoZW4gc2V0IGl0IGluIHRoZSBhcnJheQoKICAgICAgdGhpcy5xdWVzdGlvbnNbaW5kZXhdLmdpdmVuQW5zd2VyID0gZ2l2ZW5BbnN3ZXI7IC8vc2V0IHRoZSBjbGlja2VkIGJ1dHRvbgoKICAgICAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoImNsaWNrZWQiKTsKICAgICAgdmFyIGFsbEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJbaW5kZXg9XCIiLmNvbmNhdChpbmRleCwgIlwiXSIpKTsgLy9kaXNhYmxlIG5vbiB1c2VkIGJ1dHRvbnMKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsQnV0dG9ucy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmIChhbGxCdXR0b25zW2ldID09IGV2ZW50LnRhcmdldCkgY29udGludWU7CiAgICAgICAgYWxsQnV0dG9uc1tpXS5zZXRBdHRyaWJ1dGUoImRpc2FibGVkIiwgIiIpOwogICAgICB9IC8vSW52b2tlIGl0CgoKICAgICAgdGhpcy5jaGVja0Fuc3dlcihldmVudCwgaW5kZXgpOwogICAgfSwKICAgIC8vZGlkIHlvdSBhbnN3ZXJlZCB3aGlzZT8KICAgIGNoZWNrQW5zd2VyOiBmdW5jdGlvbiBjaGVja0Fuc3dlcihldmVudCwgaW5kZXgpIHsKICAgICAgdmFyIGFjdHVhbFF1ZXN0aW9uID0gdGhpcy5xdWVzdGlvbnNbaW5kZXhdOyAvL2Fuc3dlciBnaXZlbj8KCiAgICAgIGlmIChhY3R1YWxRdWVzdGlvbi5naXZlbkFuc3dlciA9PT0gYWN0dWFsUXVlc3Rpb24uY29ycmVjdF9hbnN3ZXIpIHsKICAgICAgICAvL2dpdmUgdXNlciBhIG5pY2UgZmVlZGJhY2sKICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmFkZCgicmlnaHRBbnN3ZXIiKTsgLy9hbmQgbWFyayBhcyByaWdodAoKICAgICAgICB0aGlzLnF1ZXN0aW9uc1tpbmRleF0ucmlnaHRBbnN3ZXIgPSB0cnVlOyAvL3Njb3JlIHNvbWUgcG9pbnQKCiAgICAgICAgdGhpcy5jb3JyZWN0QW5zd2VycysrOwogICAgICB9IGVsc2UgewogICAgICAgIC8vZ2l2ZSB1c2VyIGEgbm90IHNvIG5pY2UgZmVlZGJhY2sKICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmFkZCgid3JvbmdBbnN3ZXIiKTsgLy9tYXJrIGFzIGZhbHNlCgogICAgICAgIHRoaXMucXVlc3Rpb25zW2luZGV4XS5yaWdodEFuc3dlciA9IGZhbHNlOyAvL2FuZCBzaG93IHRoZSByaWdodCBvbgoKICAgICAgICB2YXIgY29ycmVjdEFuc3dlciA9IHRoaXMucXVlc3Rpb25zW2luZGV4XS5jb3JyZWN0X2Fuc3dlcjsKICAgICAgICB2YXIgYWxsQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltpbmRleD1cIiIuY29uY2F0KGluZGV4LCAiXCJdIikpOwogICAgICAgIGFsbEJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7CiAgICAgICAgICBpZiAoYnV0dG9uLmlubmVySFRNTCA9PT0gY29ycmVjdEFuc3dlcikgewogICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgic2hvd1JpZ2h0QW5zd2VyIik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gLy9zZXQgaW5kZXggb25lIHVwCgoKICAgICAgaWYgKHRoaXMuaW5kZXggPCB0aGlzLnF1ZXN0aW9ucy5sZW5ndGggLSAxKSB7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aGlzLmluZGV4ICs9IDE7CiAgICAgICAgfS5iaW5kKHRoaXMpLCAzMDAwKTsKICAgICAgfQogICAgfSwKICAgIC8vbG9hZCBkYXRhIGFzIHNvb24gYXMgdGhlIGNvbXBvbmVudCBpcyBsb2FkZWQKICAgIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICAgIHRoaXMuZmV0Y2hRdWVzdGlvbnMoKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["Questions.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div id=\"quiz-container\">\r\n    <div class=\"correctAnswers\">\r\n      You have <strong>{{ correctAnswers }} of {{ questions.length }} correct!</strong>\r\n    </div>\r\n    <div class=\"correctAnswers\">\r\n      You are at question {{ index + 1 }} of {{ questions.length }} total, hang on!\r\n    </div>\r\n\r\n    <hr class=\"divider\" />\r\n\r\n    <div>\r\n      <h1 v-html=\"loading ? 'Loading...' : currentQuestion.question\"></h1>\r\n      <form v-if=\"currentQuestion\">\r\n        <button\r\n          v-for=\"answer in currentQuestion.answers\"\r\n          :index=\"currentQuestion.key\"\r\n          :key=\"answer\"\r\n          v-html=\"answer\"\r\n          @click.prevent=\"selectAnswerClick\"\r\n        ></button>\r\n      </form>\r\n\r\n      <hr class=\"divider\" />\r\n\r\n      <form v-if=\"index + 1 == questions.length\">\r\n        <button type=\"submit\" @click.prevent = \"startNewClick\"> START AGAIN? </button>\r\n      </form>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport {getConfig} from \"@/utils/config\";\r\n\r\nexport default {\r\n    name: \"Questions\",\r\n\r\n    //get Config\r\n    async created() {\r\n        const config = getConfig();\r\n\r\n        console.log(config);\r\n\r\n        //if nothing go back\r\n        if (config == null) {\r\n            this.$router.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        //else get the questions\r\n        try {\r\n                this.loading = true;\r\n\r\n                //for indentify single answers\r\n                let index = 0;\r\n\r\n                //build URL\r\n                let fetchURL = \"https://opentdb.com/api.php?amount=\"+ config.amount +\"&category=\"+ config.category.id +\"&difficulty=\"+ config.difficulty.id +\"&type=multiple\";\r\n                //let fetchURL = \"https://opentdb.com/api.php?amount=\"+ 10 +\"&category=\"+ 11 +\"&difficulty=\"+ \"easy\" +\"&type=multiple\"\r\n\r\n                console.log(fetchURL);\r\n\r\n                // fetch questionns from api\r\n                let response = await fetch(fetchURL);\r\n                let jsonResponse = await response.json();\r\n                let data = jsonResponse.results.map((questions) => {\r\n\r\n                // get the answers to an array\r\n                questions.answers = [\r\n                    questions.correct_answer,\r\n                    ...questions.incorrect_answers,\r\n                ];\r\n\r\n                // set some defaults for further use\r\n                questions.rightAnswer = null;\r\n                questions.key = index;\r\n                index ++;\r\n\r\n                return questions;\r\n                } );\r\n\r\n                this.questions = data;\r\n                this.loading = false;\r\n                     \r\n        } \r\n        catch(error){\r\n            this.error = error.message;\r\n        }\r\n            \r\n    },\r\n\r\n    // store the data\r\n    data() {\r\n    return {\r\n        error: \"\",\r\n        correctAnswers: 0,\r\n        questions: [],\r\n        loading: true,\r\n        index: 0\r\n        };\r\n    },\r\n    //computed Section\r\n    computed: {\r\n        //which one to ask?\r\n        currentQuestion() {\r\n            if(this.questions != [])\r\n                return this.questions[this.index];\r\n            \r\n            return null;\r\n        },\r\n        questionsFinished(){\r\n            if (this.questions.length == 0)\r\n                return false;\r\n            \r\n            //is everything answered?\r\n            let finishedQuestions = 0;\r\n            this.questions.forEach( function(questions) {\r\n                questions.correct_answer != null ? finishedQuestions++ : null;\r\n            }\r\n            );\r\n            return finishedQuestions == this.questions.length;\r\n        }\r\n    \r\n  },\r\n\r\n    //methods Section\r\n    methods: {\r\n        //restart the Quiz\r\n        startNewClick: function(){\r\n            this.$router.push(\"/\");\r\n        },\r\n\r\n        //what happens if you choose the answer\r\n        selectAnswerClick: function(event){\r\n\r\n            //which one was answered?\r\n            let index = event.target.getAttribute(\"index\");\r\n            let selectedGivenAnswer = event.target.innerHTML;\r\n            //make sure there is nothing wrong in the string\r\n            let givenAnswer = selectedGivenAnswer.replace(/'/, \"&#039;\");\r\n\r\n            //then set it in the array\r\n            this.questions[index].givenAnswer = givenAnswer;\r\n\r\n            //set the clicked button\r\n            event.target.classList.add(\"clicked\");\r\n            let allButtons = document.querySelectorAll(`[index=\"${index}\"]`)\r\n\r\n            //disable non used buttons\r\n            for (let i = 0; i < allButtons.length; i++){\r\n                if (allButtons[i] == event.target) \r\n                    continue;\r\n                \r\n                allButtons[i].setAttribute(\"disabled\", \"\");\r\n            }\r\n\r\n            //Invoke it\r\n            this.checkAnswer(event, index);\r\n\r\n        },\r\n\r\n        //did you answered whise?\r\n        checkAnswer: function(event, index){\r\n\r\n            let actualQuestion = this.questions[index];\r\n\r\n            //answer given?\r\n            if (actualQuestion.givenAnswer === actualQuestion.correct_answer)\r\n                {\r\n                    //give user a nice feedback\r\n                    event.target.classList.add(\"rightAnswer\");\r\n\r\n                    //and mark as right\r\n                    this.questions[index].rightAnswer = true;\r\n\r\n                    //score some point\r\n                    this.correctAnswers++;\r\n\r\n                }\r\n\r\n                else {\r\n                    //give user a not so nice feedback\r\n                    event.target.classList.add(\"wrongAnswer\");\r\n\r\n                    //mark as false\r\n                    this.questions[index].rightAnswer = false;\r\n\r\n                    //and show the right on\r\n                    let correctAnswer = this.questions[index].correct_answer;\r\n                    let allButtons = document.querySelectorAll(`[index=\"${index}\"]`);\r\n\r\n                    allButtons.forEach(function(button) \r\n                    {\r\n                        if (button.innerHTML === correctAnswer) \r\n                        {\r\n                            button.classList.add(\"showRightAnswer\");\r\n                        }\r\n                            \r\n                    });\r\n            }\r\n                \r\n            //set index one up\r\n            if (this.index < this.questions.length - 1) {\r\n                setTimeout(\r\n                    function() {\r\n                        this.index += 1;\r\n                    }.bind(this),\r\n                3000 );\r\n            }\r\n            \r\n        },\r\n\r\n\r\n        //load data as soon as the component is loaded\r\n        mounted() {\r\n            this.fetchQuestions();\r\n        }\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n    #quiz-container {\r\n        margin: 1rem auto;\r\n        padding: 1rem;\r\n        max-width: 750px;\r\n    }\r\n\r\n  h1 {\r\n        font-size: 1.3rem;\r\n        padding: 0.7rem;\r\n    } \r\n\r\n  .divider {\r\n        margin: 0.5rem 0;\r\n        border: 3px solid rgba(72, 73, 73, 0.7);\r\n        border-radius: 2px;\r\n        box-shadow: 3px 5px 5px rgba(0, 0, 0, 0.3);\r\n    }\r\n\r\n    button.rightAnswer {\r\n        color: black;\r\n        background: linear-gradient(\r\n            210deg,\r\n            rgba(0, 178, 72, 0.25),\r\n            rgba(0, 178, 72, 0.5)\r\n        );\r\n    }\r\n\r\n    button.wrongAnswer {\r\n    color: black;\r\n    background: linear-gradient(\r\n        210deg,\r\n        rgba(245, 0, 87, 0.25),\r\n        rgba(245, 0, 87, 0.5)\r\n    );\r\n    }\r\n\r\n    button.showRightAnswer {\r\n    color: black;\r\n    background: linear-gradient(\r\n        210deg,\r\n        rgba(54, 131, 2, 0.25),\r\n        rgba(5, 243, 5, 0.5)\r\n    );\r\n    }\r\n</style>"],"sourceRoot":"src/components"}]}